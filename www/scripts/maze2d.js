var maze2d;(()=>{"use strict";var t={d:(e,i)=>{for(var s in i)t.o(i,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:i[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{Maze2D:()=>a});class i{constructor(t,e){this._y=e,this._x=t}get X(){return this._x}get Y(){return this._y}Add(t){return new i(this._x+t.X,this._y+t.Y)}Reverse(){return new i(-1*this._x,-1*this._y)}Equals(t){return this._x==t.X&&this._y==t.Y}}class s{constructor(){this._front=null,this._right=null,this._back=null,this._left=null}get Front(){return this._front}get Right(){return this._right}get Back(){return this._back}get Left(){return this._left}set Front(t){this._front=t}set Right(t){this._right=t}set Back(t){this._back=t}set Left(t){this._left=t}}const h=new i(0,1),n=new i(1,0),l=new i(0,-1),r=new i(-1,0),o=new class extends s{constructor(t,e){super(),this._position=new i(t,e),this._connected=!1}set Connected(t){this._connected=t}get Connected(){return this._connected}get Position(){return this._position}get AvailableVectors(){const t=new Array;return null==this.Front&&t.push(h),null==this.Right&&t.push(n),null==this.Back&&t.push(l),null==this.Left&&t.push(r),t}get ConnectionCount(){let t=0;return null!=this.Front&&t++,null!=this.Right&&t++,null!=this.Back&&t++,null!=this.Left&&t++,t}Barricade(){null==this.Front&&(this.Front=o),null==this.Right&&(this.Right=o),null==this.Back&&(this.Back=o),null==this.Left&&(this.Left=o)}SetCellVector(t,e){h.Equals(t)?this.Front=e:n.Equals(t)?this.Right=e:l.Equals(t)?this.Back=e:r.Equals(t)&&(this.Left=e)}GetCellVector(t){return h.Equals(t)?this.Front:n.Equals(t)?this.Right:l.Equals(t)?this.Back:r.Equals(t)?this.Left:null}}(-1,-1);class a{constructor(t,e){this._canvas=t,this._maze=e;let i=this._canvas.getContext("2d");if(null==i)throw"Could not get 2D Context";this._context=i,this._context.fillStyle="black",this._context.strokeStyle="white",this._context.lineWidth=2,this._context.fillRect(0,0,this._canvas.width,this._canvas.height),this._wall_width=this._canvas.width/e.SizeX,this._wall_height=this._canvas.height/e.SizeY}get Image(){return this._context.getImageData(0,0,this._canvas.width,this._canvas.height)}renderWall(t,e){if(!e.Connected)return;const i=this._wall_width*e.Position.X,s=this._wall_height*e.Position.Y;t.beginPath(),e.Front==o&&(t.moveTo(i,s+this._wall_height),t.lineTo(i+this._wall_width,s+this._wall_height)),e.Right==o&&(t.moveTo(i+this._wall_width,s+this._wall_height),t.lineTo(i+this._wall_width,s)),e.Back==o&&(t.moveTo(i+this._wall_width,s),t.lineTo(i,s)),e.Left==o&&(t.moveTo(i,s),t.lineTo(i,s+this._wall_height)),t.stroke()}render(){const t=this._maze.CellsItr();let e=t.next();for(;0==e.done;)this.renderWall(this._context,e.value),e=t.next()}}maze2d=e})();
//# sourceMappingURL=maze2d.js.map